options {
    STATIC = false;
}

PARSER_BEGIN(MiniJava)

import java.util.ArrayList;
import java.util.Map;

import Symboltable.*;
import ByteCodeGenerator.*;
import Exceptions.*;


public class MiniJava {
    public static void main(String[] args) {
	MiniJava exp = new MiniJava(System.in);
        try {
            mainSymbolTable.isMain = true;

            exp.programm();

            Map<String, SymbolTable> methods = symbolTableGenerator.getSymbolTableList();

            ArrayList<MethodObject> methodObjectsRaw = new ArrayList<>();
            methodObjectsRaw.add(new MethodObject("main", 1, String.join(" ", mainSymbolTable.byteCode)));

            System.out.println("\n" + "**Byte Code for 'main' Method**");
            System.out.println(String.join(" ", mainSymbolTable.byteCode).toLowerCase() + "\n");

            for (Map.Entry<String, SymbolTable> entry : methods.entrySet()) {
                methodObjectsRaw.add(new MethodObject(entry.getKey(), entry.getValue().getArgCount(), String.join(" ", entry.getValue().byteCode)));
                System.out.println("**Byte Code for '" + entry.getKey() + "' Method**");
                System.out.println(String.join(" ", entry.getValue().byteCode).toLowerCase() + "\n");
            }

            MethodObject[] methodObjects = new MethodObject[methodObjectsRaw.size()];
            methodObjects = methodObjectsRaw.toArray(methodObjects);
            generator.generateClassFile(methodObjects);

        } catch (Exception e) {
            System.out.println(e.getClass().getSimpleName() + ": " + e.getMessage());
        }
    }

    public static SymbolTableGenerator symbolTableGenerator = new SymbolTableGenerator();
    public static SymbolTable mainSymbolTable = new SymbolTable();
    public static JumpSizeCalculator jumpSizeCalculator = new JumpSizeCalculator();
    public static JavaClassFileGenerator generator = new JavaClassFileGenerator("MiniJavaClassFile", true, false, true);

    public final static String BIPUSH = "10";
    public final static String SIPUSH = "11";
    public final static String ILOAD = "15";
    public final static String ISTORE = "36";
    public final static String IADD = "60";
    public final static String ISUB = "64";
    public final static String IMUL = "68";
    public final static String IDIV = "6c";
    public final static String GOTO = "a7";
    public final static String IRETURN = "ac";
    public final static String RET = "b1";
    public final static String GETSTATIC = "b2";
    public final static String PUTSTATIC = "b3";
    public final static String INVOKESTATIC = "b8";

    public final static String HEXFORMAT4 = "%1$04X";
    public final static String HEXFORMAT2 = "%1$02X";

    public final static String IFSTART = "IFSTART";
    public final static String IFEND = "IFEND";
    public final static String ELSESTART = "ELSESTART";
    public final static String ELSEEND = "ELSEEND";
    public final static String WHILESTART = "WHILESTART";
    public final static String WHILEEND = "WHILEEND";
}

PARSER_END(MiniJava)

SKIP:  {
   " "
 | "\t"
 | "\n"
 | "\r"
 | <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
 | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
 }
TOKEN : {
      <NUMBER : "0" | ["1" - "9"] (["0" - "9"])*>
    | <MUL : "*">
    | <DIV : "/">
    | <ADD : "+">
    | <SUB : "-">
    | <COMPOP : "<" | ">" | "<=" | ">=" | "==" | "!=">
    | <FINAL : "final">
    | <INT : "int">
    | <PRINT : "print">
    | <IF : "if">
    | <ELSE : "else">
    | <WHILE : "while">
    | <MAIN : "main">
    | <VOID : "void">
    | <STATIC : "static">
    | <FUNC : "func">
    | <RETURN : "return">
    | <CLASS : "class"> //Class DECL
    | <IDENT : ["a" - "z", "A"-"Z"] (["a" - "z", "A" - "Z", "0" - "9"])*>
}
//New Main Entry Point
void programm() throws SymbolAlreadyDefinedException, UnknownSymbolException, LValueException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{}
{
    classDecl() <EOF>
}
//Old Entry Point
void programBlock() throws SymbolAlreadyDefinedException, UnknownSymbolException, LValueException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{}
{
    constDecl() varDecl() procedure() function() mainDecl() { symbolTableGenerator.setCurrentActiveToInactive(); } statement()
    { mainSymbolTable.byteCode.add(RET); }
}

void mainDecl() throws LValueException, UnknownSymbolException, RValueException, WrongParametersException, UnknownFunctionException,MethodCallException:
{}
{
    <STATIC> <VOID> <MAIN> "(" ")"
}
//Class Declaration
void classDecl() throws SymbolAlreadyDefinedException, UnknownSymbolException, LValueException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{ Token t1; }
{
    <CLASS> t1=<IDENT> "{" 
        programBlock()
    "}"
}


void function() throws SymbolAlreadyDefinedException, UnknownSymbolException, LValueException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{ Token t1; }
{
    ( <FUNC> t1=<IDENT>
    {
        if (symbolTableGenerator.checkIfMethod(t1.image) || mainSymbolTable.checkIfSymbol(t1.image)) {
            throw new SymbolAlreadyDefinedException("Symbol '" + t1.image + "' is already defined.");
        }

        symbolTableGenerator.addSymbolTable(t1.image);
        symbolTableGenerator.setCurrentActiveToInactive();
        symbolTableGenerator.setSymbolTableActive(t1.image);
        symbolTableGenerator.getActiveSymbolTable().isProcedure = false;
    }
    "(" routinenParameter(t1) { symbolTableGenerator.getSymbolTable(t1.image).addParameters(); } ")"
    "{" routinenBlock() <RETURN> expression() ";" "}" { symbolTableGenerator.getSymbolTable(t1.image).byteCode.add(IRETURN);  })*
}

void procedure() throws SymbolAlreadyDefinedException, UnknownSymbolException, LValueException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{ Token t1; }
{
    (<VOID> t1=<IDENT>
    {
        if (symbolTableGenerator.checkIfMethod(t1.image) || mainSymbolTable.checkIfSymbol(t1.image)) {
            throw new SymbolAlreadyDefinedException("Symbol '" + t1.image + "' is already defined.");
        }

        symbolTableGenerator.addSymbolTable(t1.image);
        symbolTableGenerator.setCurrentActiveToInactive();
        symbolTableGenerator.setSymbolTableActive(t1.image);
        symbolTableGenerator.getActiveSymbolTable().isProcedure = true;
    }
    "(" routinenParameter(t1) { symbolTableGenerator.getSymbolTable(t1.image).addParameters(); } ")"
    "{" routinenBlock() "}" { symbolTableGenerator.getSymbolTable(t1.image).byteCode.add(RET); })*
}

void routinenParameter(Token t1) throws SymbolAlreadyDefinedException, UnknownFunctionException:
{ Token t2; }
{
    (<INT> t2=<IDENT>
    {
        symbolTableGenerator.incrementParameterCount(t1.image);
        symbolTableGenerator.getSymbolTable(t1.image).reserveParameters(t2.image);
    }
    routinenParameterList(t1))?
}

void routinenParameterList(Token t1) throws SymbolAlreadyDefinedException, UnknownFunctionException:
{ Token t2; }
{
    ("," <INT> t2=<IDENT>
    {
        symbolTableGenerator.incrementParameterCount(t1.image);
        symbolTableGenerator.getSymbolTable(t1.image).reserveParameters(t2.image);
    }
    )*
}

void routinenBlock() throws SymbolAlreadyDefinedException, UnknownSymbolException, LValueException, RValueException, WrongParametersException, UnknownFunctionException, UnknownFunctionException, MethodCallException:
{}
{
    ( constDecl() varDecl() statement() )?
}

void constDecl() throws SymbolAlreadyDefinedException:
{}
{
    (<FINAL> <INT> constZuw() constList() ";")?
}

void varDecl() throws SymbolAlreadyDefinedException:
{ Token t1; int value; SymbolTable activeSymbolTable = symbolTableGenerator.getActiveSymbolTable() != null ? symbolTableGenerator.getActiveSymbolTable() : mainSymbolTable; }
{
    (<INT> t1=<IDENT> value=varZuw()
    {
        if (symbolTableGenerator.checkIfMethod(t1.image)) {
            throw new SymbolAlreadyDefinedException("Symbol '" + t1.image + "' is already defined.");
        }

        activeSymbolTable.byteCode.add(SIPUSH);
        activeSymbolTable.byteCode.add(String.format(HEXFORMAT4, value));

        if (!activeSymbolTable.isMain) {
            activeSymbolTable.byteCode.add(ISTORE);
            activeSymbolTable.byteCode.add(String.format(HEXFORMAT2, activeSymbolTable.getCurrentAddress()));
        }
        else {
            activeSymbolTable.byteCode.add(PUTSTATIC + "[" + t1.image + "]");
        }

        activeSymbolTable.addVariable(t1.image);
    }
    varList() ";"
    )?
}

void statement() throws UnknownSymbolException, LValueException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{ Token t1; SymbolTable activeSymbolTable = symbolTableGenerator.getActiveSymbolTable() != null ? symbolTableGenerator.getActiveSymbolTable() : mainSymbolTable; }
{
    t1=<IDENT> ("="
    {
        if (!activeSymbolTable.checkIfVariable(t1.image) && activeSymbolTable.isMain ||
            !mainSymbolTable.checkIfVariable(t1.image) && !activeSymbolTable.checkIfVariable(t1.image) && !activeSymbolTable.isMain) {
            throw new LValueException("Left Value '" + t1.image + "' does not match variable");
        }
    }
    expression()
    {
        if (!activeSymbolTable.isMain && activeSymbolTable.checkIfVariable(t1.image)) {
            activeSymbolTable.byteCode.add(ISTORE);
            activeSymbolTable.byteCode.add(String.format(HEXFORMAT2, activeSymbolTable.getVariableAddress(t1.image)));
        }
        else {
            activeSymbolTable.byteCode.add(PUTSTATIC + "[" + t1.image + "]");
        }
    }
    | // Either expression or procCall
    procCall(t1)
    {
        activeSymbolTable.byteCode.add(INVOKESTATIC + "(" + t1.image + ")");
    }
    ) ";"
    |
    <PRINT> "(" expression() ")" ";"
    {
        activeSymbolTable.byteCode.add(INVOKESTATIC + "(print)");
    }
    |
    "{" stmtList() "}"
    |
    <IF> condition()
    {
        activeSymbolTable.byteCode.add(activeSymbolTable.getCurrentLabelNumberIf() + IFSTART);
        activeSymbolTable.addLabelIf(String.valueOf(activeSymbolTable.getCurrentLabelNumberIf()));
        activeSymbolTable.incrementCurrentLabelNumberIf();
    }
    statement()
    {
        activeSymbolTable.byteCode.add(activeSymbolTable.getLabelIf(activeSymbolTable.getLabelNumbersIf().size() - 1) + IFEND);
    }
    optElse()
    {
        activeSymbolTable.byteCode = jumpSizeCalculator.calculateJumpBytesForIF(activeSymbolTable.byteCode, activeSymbolTable.getLabelIf(activeSymbolTable.getLabelNumbersIf().size() - 1));
        activeSymbolTable.removeLabelIf(activeSymbolTable.getLabelNumbersIf().size() - 1);
    }
    |
    <WHILE> condition()
    {
        activeSymbolTable.byteCode.add(activeSymbolTable.getCurrentLabelNumberWhile() + WHILESTART);
        activeSymbolTable.addLabelWhile(String.valueOf(activeSymbolTable.getCurrentLabelNumberWhile()));
        activeSymbolTable.incrementCurrentLabelNumberWhile();
    }
    statement()
    {
       activeSymbolTable.byteCode.add(activeSymbolTable.getLabelWhile(activeSymbolTable.getLabelNumbersWhile().size() - 1) + WHILEEND);
       activeSymbolTable.byteCode.add(GOTO);
       activeSymbolTable.byteCode = jumpSizeCalculator.calculateJumpBytesForWHILE(activeSymbolTable.byteCode, activeSymbolTable.getLabelWhile(activeSymbolTable.getLabelNumbersWhile().size() - 1));
       activeSymbolTable.removeLabelWhile(activeSymbolTable.getLabelNumbersWhile().size() - 1);
    }
}

void constZuw() throws SymbolAlreadyDefinedException:
{ Token t1, t2; SymbolTable activeSymbolTable = symbolTableGenerator.getActiveSymbolTable() != null ? symbolTableGenerator.getActiveSymbolTable() : mainSymbolTable; }
{
    t1=<IDENT> "=" t2=<NUMBER>
    {
        if (symbolTableGenerator.checkIfMethod(t1.image)) {
            throw new SymbolAlreadyDefinedException("Symbol '" + t1.image + "' is already defined.");
        }

        activeSymbolTable.addConstant(t1.image, Integer.valueOf(t2.image));
    }
}

void constList() throws SymbolAlreadyDefinedException:
{}
{
    ("," constZuw() constList())?
}

int varZuw():
{ Token t1; }
{
    "=" t1=<NUMBER> { return Integer.parseInt(t1.image); }
    |
    { return 0; }
}

void varList() throws SymbolAlreadyDefinedException:
{ Token t1; int value; SymbolTable activeSymbolTable = symbolTableGenerator.getActiveSymbolTable() != null ? symbolTableGenerator.getActiveSymbolTable() : mainSymbolTable; }
{
    ("," t1=<IDENT> value=varZuw()
    {
        activeSymbolTable.byteCode.add(SIPUSH);
        activeSymbolTable.byteCode.add(String.format(HEXFORMAT4, value));

        if (!activeSymbolTable.isMain) {
            activeSymbolTable.byteCode.add(ISTORE);
            activeSymbolTable.byteCode.add(String.format(HEXFORMAT2, activeSymbolTable.getCurrentAddress()));
        }
        else {
            activeSymbolTable.byteCode.add(PUTSTATIC + "[" + t1.image + "]");
        }

        activeSymbolTable.addVariable(t1.image);
    }
    varList())?
}

void expression() throws UnknownSymbolException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{}
{
    term() summe()
}

void term() throws UnknownSymbolException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{}
{
    faktor() produkt()
}

void summe() throws UnknownSymbolException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{ SymbolTable activeSymbolTable = symbolTableGenerator.getActiveSymbolTable() != null ? symbolTableGenerator.getActiveSymbolTable() : mainSymbolTable; }
{
    (<ADD> term()
    {
        activeSymbolTable.byteCode.add(IADD);
    }
    summe()
    |
    <SUB> term()
    {
        activeSymbolTable.byteCode.add(ISUB);
    }
    summe())?
}

void faktor() throws UnknownSymbolException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{ Token t1; SymbolTable activeSymbolTable = symbolTableGenerator.getActiveSymbolTable() != null ? symbolTableGenerator.getActiveSymbolTable() : mainSymbolTable; }
{
    t1=<NUMBER>
    {
        activeSymbolTable.byteCode.add(SIPUSH);
        activeSymbolTable.byteCode.add(String.format(HEXFORMAT4, Integer.valueOf(t1.image)));
    }
    |
    t1=<IDENT>
    (functionCall(t1))?
    {
        if (!activeSymbolTable.isMain) {
            if (activeSymbolTable.checkIfVariable(t1.image)) {
                activeSymbolTable.byteCode.add(ILOAD);
                activeSymbolTable.byteCode.add(String.format(HEXFORMAT2, activeSymbolTable.getSymbol(t1.image)));
            }
            else if (activeSymbolTable.checkIfConstant(t1.image)) {
                activeSymbolTable.byteCode.add(SIPUSH);
                activeSymbolTable.byteCode.add(String.format(HEXFORMAT4, activeSymbolTable.getSymbol(t1.image)));
            }
            else if (mainSymbolTable.checkIfVariable(t1.image)) {
                activeSymbolTable.byteCode.add(GETSTATIC + "[" + t1.image + "]");
            }
            else if (mainSymbolTable.checkIfConstant(t1.image)) {
                activeSymbolTable.byteCode.add(SIPUSH);
                activeSymbolTable.byteCode.add(String.format(HEXFORMAT4, mainSymbolTable.getSymbol(t1.image)));
            }
            else if (symbolTableGenerator.checkIfMethod(t1.image)) {
                activeSymbolTable.byteCode.add(INVOKESTATIC + "(" + t1.image + ")");
            }
            else {
                throw new RValueException("Right Value' " + t1.image + "' does not match Variable, Constant or Function.");
            }
        }
        else if (mainSymbolTable.checkIfVariable(t1.image)) {
            mainSymbolTable.byteCode.add(GETSTATIC + "[" + t1.image + "]");
        }
        else if (mainSymbolTable.checkIfConstant(t1.image)) {
            mainSymbolTable.byteCode.add(SIPUSH);
            mainSymbolTable.byteCode.add(String.format(HEXFORMAT4, mainSymbolTable.getSymbol(t1.image)));
        }
        else if (symbolTableGenerator.checkIfMethod(t1.image)) {
            mainSymbolTable.byteCode.add(INVOKESTATIC + "(" + t1.image + ")");
        }
        else {
            throw new RValueException("Right Value' " + t1.image + "' does not match Variable, Constant or Function.");
        }
    }
    |
    "(" expression() ")"
}

void produkt() throws UnknownSymbolException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{ SymbolTable activeSymbolTable = symbolTableGenerator.getActiveSymbolTable() != null ? symbolTableGenerator.getActiveSymbolTable() : mainSymbolTable; }
{
    (<MUL> faktor()
    {
        activeSymbolTable.byteCode.add(IMUL);
    }
    produkt()
    |
    <DIV> faktor()
    {
        activeSymbolTable.byteCode.add(IDIV);
    }
    produkt()
    )?
}

void condition() throws UnknownSymbolException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{ Token t1; SymbolTable activeSymbolTable = symbolTableGenerator.getActiveSymbolTable() != null ? symbolTableGenerator.getActiveSymbolTable() : mainSymbolTable; }
{
    expression() t1=<COMPOP> expression()
    {
        activeSymbolTable.byteCode.add(jumpSizeCalculator.getCompOPByteCode(t1.image));
    }
}

void stmtList() throws LValueException, UnknownSymbolException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{}
{
    (statement() stmtList())?
}

void optElse() throws LValueException, UnknownSymbolException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{ SymbolTable activeSymbolTable = symbolTableGenerator.getActiveSymbolTable() != null ? symbolTableGenerator.getActiveSymbolTable() : mainSymbolTable; }
{
    (<ELSE>
    {
        activeSymbolTable.byteCode.add(activeSymbolTable.getLabelIf(activeSymbolTable.getLabelNumbersIf().size() - 1) + ELSESTART);
        activeSymbolTable.byteCode.add(GOTO);
    }
    statement()
    {
        activeSymbolTable.byteCode.add(activeSymbolTable.getLabelIf(activeSymbolTable.getLabelNumbersIf().size() - 1) + ELSEEND);
    }
    )?
}

void functionCall(Token t1) throws UnknownSymbolException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{ SymbolTable activeSymbolTable = symbolTableGenerator.getSymbolTable(t1.image); }
{
    {
        try {
            symbolTableGenerator.getSymbolTable(t1.image).callArgCounts.add(0);
        } catch (NullPointerException e) {
            throw new UnknownFunctionException("Cannot find function declaration for '" + t1.image + "'.");
        }

        if (activeSymbolTable.isProcedure) {
            throw new MethodCallException("'" + t1.image + "' is not a function");
        }

    }
    "(" (expression() { activeSymbolTable.callArgCounts.set(activeSymbolTable.callArgCounts.size() - 1, activeSymbolTable.callArgCounts.get(activeSymbolTable.callArgCounts.size() - 1) + 1); } ("," expression() { activeSymbolTable.callArgCounts.set(activeSymbolTable.callArgCounts.size() - 1, activeSymbolTable.callArgCounts.get(activeSymbolTable.callArgCounts.size() - 1) + 1);} )* )? ")"
    {
        activeSymbolTable.callArgCount = activeSymbolTable.callArgCounts.get(activeSymbolTable.callArgCounts.size() - 1);
        activeSymbolTable.callArgCounts.remove(activeSymbolTable.callArgCounts.size() - 1);

        if (activeSymbolTable.callArgCount != activeSymbolTable.getArgCount()) {
            throw new WrongParametersException("Wrong Parameter count. Expected: " + activeSymbolTable.getArgCount() + ", Actucal: " + activeSymbolTable.callArgCount);
        }
        activeSymbolTable.callArgCount = 0;
    }
}

void procCall(Token t1) throws UnknownSymbolException, RValueException, WrongParametersException, UnknownFunctionException, MethodCallException:
{ SymbolTable activeSymbolTable = symbolTableGenerator.getSymbolTable(t1.image); }
{
    {
        try {
            symbolTableGenerator.getSymbolTable(t1.image).callArgCounts.add(0);
        } catch (NullPointerException e) {
            throw new UnknownFunctionException("Cannot find procedure declaration for '" + t1.image + "'.");
        }

        if (!activeSymbolTable.isProcedure) {
            throw new MethodCallException("'" + t1.image + "' is not a procedure");
        }

    }

    "(" (expression() { activeSymbolTable.callArgCounts.set(activeSymbolTable.callArgCounts.size() - 1, activeSymbolTable.callArgCounts.get(activeSymbolTable.callArgCounts.size() - 1) + 1); } ("," expression() { activeSymbolTable.callArgCounts.set(activeSymbolTable.callArgCounts.size() - 1, activeSymbolTable.callArgCounts.get(activeSymbolTable.callArgCounts.size() - 1) + 1);} )* )? ")"
    {
        activeSymbolTable.callArgCount = activeSymbolTable.callArgCounts.get(activeSymbolTable.callArgCounts.size() - 1);
        activeSymbolTable.callArgCounts.remove(activeSymbolTable.callArgCounts.size() - 1);

        if (activeSymbolTable.callArgCount != activeSymbolTable.getArgCount()) {
            throw new WrongParametersException("Wrong Parameter count. Expected: " + activeSymbolTable.getArgCount() + ", Actucal: " + activeSymbolTable.callArgCount);
        }
        activeSymbolTable.callArgCount = 0;
    }
}




